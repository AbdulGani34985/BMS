{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "_subs_of_counting",
    "name" : "-subs  of counting",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "static",
      "sizeX" : 10.5,
      "sizeY" : 10,
      "resources" : [ ],
      "templateHtml" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n<title>Device Counts</title>\r\n</head>\r\n<body>\r\n<h2>Device Counts</h2>\r\n<div *ngFor=\"let dat of data ; let $dindex = index\">\r\n    <!--<label>Device:</label>-->\r\n    <!-- {{ dat.data[0][1] }}-->\r\n    <!--<label>Active Device:</label>-->\r\n    <!-- {{ dat.data[0][1] }}-->\r\n  <div *ngIf=\"$dindex === 0\">\r\n    <label>Device:</label>\r\n     {{ dat.data[0][1] }}\r\n  </div>\r\n  <div *ngIf=\"$dindex === 1\">\r\n    <label>Active Device:</label>\r\n     {{ dat.data[0][1] }}\r\n  </div>\r\n</div>\r\n</body>\r\n</html>",
      "templateCss" : "",
      "controllerScript" : " self.onInit = function() {\r\n    \r\n    const datasources = [\r\n        {\r\n            type: \"entityCount\", //Sets that there is a subscription to the entity count\r\n            dataKeys: [\r\n                {\r\n                    decimals: 0, //Number of digits after floating point for this key\r\n                    label: \"Devices\", //Key label\r\n                    name: \"count\", //Key name\r\n                    settings: {},\r\n                    type: \"count\" //Key type\r\n                }\r\n            ],\r\n            entityFilter: //Describes entities (See Entity Filters topic)\r\n            {\r\n                type: \"entityType\", //Entity filter type\r\n                entityType: \"DEVICE\"  //Entity type\r\n            }\r\n        },\r\n        {\r\n            type: \"entityCount\",\r\n            dataKeys: [\r\n                {\r\n                    decimals: 0,\r\n                    label: \"Active Devices\",\r\n                    name: \"count\",\r\n                    settings: {},\r\n                    type: \"count\"\r\n                }\r\n            ],\r\n            entityFilter: //Describes entities (See Entity Filters topic)\r\n            {\r\n                type: \"entityType\",\r\n                entityType: \"DEVICE\"\r\n            },\r\n            keyFilters: //Filtering entity by keys (See Key Filters topic)\r\n            [\r\n                {\r\n                    key: {\r\n                        key: \"active\", //Key name\r\n                        type: \"ATTRIBUTE\" //Key type\r\n                    },\r\n                    predicate: {\r\n                        operation: \"EQUAL\", //Operation type (You can find full list of operations in Key Filters topic)\r\n                        type: \"BOOLEAN\", //Sorting value type\r\n                        value: {\r\n                            defaultValue: true //Sorting value\r\n                        }\r\n                    },\r\n                    valueType: \"BOOLEAN\" //Value type\r\n                }\r\n            ]\r\n        }\r\n    ];\r\n\r\n    const subscriptionOptions = {\r\n        type: 'latest', //Subscription type\r\n        datasources: datasources, //Describes what data you want to subscribe\r\n        callbacks: //Sets callbacks for subscription\r\n        {\r\n            onDataUpdated: () => {\r\n                self.onDataUpdated();\r\n            }\r\n        }\r\n    };\r\n\r\n    self.ctx.subscriptionApi.createSubscription(subscriptionOptions, true).subscribe(\r\n        (subscription) => {\r\n            self.ctx.defaultSubscription = subscription; //Saving subscription information into widget context\r\n            self.ctx.$scope.data = subscription.data; //Saving data into widget context\r\n            self.ctx.$scope.datasources = subscription.datasources; //Saving datasource into widget context\r\n           \r\n            // console.log(\"self.ctx.$scope.data[0].data[0]&&self.ctx.$scope.data[0].data[0][1]\");\r\n             \r\n            //   console.log(self.ctx.$scope.data[0].data[0]&&self.ctx.$scope.data[0].data[0][1]);\r\n            //  console.log(\"self.ctx.$scope.data[1].data[0]&&self.ctx.$scope.data[1].data[0][1]\");\r\n             \r\n            //   console.log(self.ctx.$scope.data[1].data[0]&&self.ctx.$scope.data[1].data[0][1]);\r\n              \r\n              console.log(\"self.ctx.$scope.data\");\r\n              console.log(self.ctx);\r\n            \r\n        }\r\n    );\r\n   \r\n}\r\n\r\nself.onDataUpdated = function(){\r\n    self.ctx.detectChanges();\r\n}\r\n",
      "settingsSchema" : "",
      "dataKeySettingsSchema" : "",
      "settingsDirective" : "tb-html-card-widget-settings",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"HTML Card\",\"dropShadow\":true}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "f5c573f0-e767-11ee-9d78-27edb85da3c3"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}